#!/usr/bin/env bash

JN_PATH=${JN_PATH:-$HOME/.jn}
JN_TEMPLATE=${JN_TEMPLATE:-$JN_PATH/templates/}
mapfile -t jn_WORKSPACES < <(find "$JN_PATH" -type d)

if [ ! -d "$JN_PATH" ]; then
  mkdir -p "$JN_PATH"
fi

RED="$(tput setaf 196)"
GREEN="$(tput setaf 82)"
BLUE="$(tput setaf 87)"

function help() {
  cat <<EOF
$(_text "$BLUE" "jn | Journal Notes")

$(_text "$BLUE" "Usage")
  jn FLAG <FLAG_INPUT> COMMAND INPUT
  jn -h | jn help

$(_text "$BLUE" "Commands")
  add FILENAME WORKSPACE       Add new note
  fzf WORKSPACE                Search all files with fzf
  journal DATE WORKSPACE       Add new journal entry
  list                         List all files
  rg WORKSPACE                 Search with fzf and rg

$(_text "$BLUE" "Flags")
  -h            Displays this message and exits
  --help        Displays this message and exits
  -n            Do not edit
  -w            Search workspaces
EOF
}

function _text() {
  local color text reset
  color=$1
  text=$2
  reset=$(tput sgr0)

  echo -e "${color}${text}${reset}"
}

function _error() {
  local message=$1

  _text "$RED" "Error: $message"
}

function _display_all_files() {
  if [ -n "$workspace" ]; then
    find -L "$JN_PATH/$workspace" -type f | sed -E "s|$JN_PATH\/||"
  else
    find -L "$JN_PATH" -type f | sed -E "s|$JN_PATH\/||"
  fi
}

function _display_workspaces() {
  printf '%s\n' "${jn_WORKSPACES[@]}"
}

function _list() {
  workspace=$1

  if [[ "$DIR" -eq 1 ]]; then
    _display_workspaces
  else
    _display_all_files
  fi
  exit 0
}

# shellcheck disable=SC2120
function _rg() {
  HEADER="A-a: Select All / A-s: Deselect All / C-p: Preview"
  RG_RELOAD="reload(rg --column --color=always --smart-case {q} $JN_PATH/$workspace | sed \"s|$JN_PATH/||\" || :)+change-preview(bat --color=always --highlight-line {2} $JN_PATH/$workspace{1} || bat --style=full --color=always $JN_PATH/$workspace{1})+change-preview-window(~4,+{2}+4/3,<80(up))"
  # shellcheck disable=SC2016
  fzf --disabled --ansi --multi \
    --bind 'alt-a:select-all,alt-d:deselect-all,ctrl-p:toggle-preview' \
    --bind "start:$RG_RELOAD" --bind "change:$RG_RELOAD" \
    --bind='alt-up:preview-up,alt-k:preview-up' \
    --bind='alt-down:preview-down,alt-j:preview-down' \
    --delimiter : \
    --header "$HEADER" \
    --preview 'bat --style=full --color=always --highlight-line {2} {1}' \
    --preview-window '~4,+{2}+4/3,<80(up)' \
    --prompt "$PROMPT" \
    --query "$*"
}

# shellcheck disable=SC2120
function _fzf() {
  HEADER="A-a: Select All / A-s: Deselect All / C-p: Preview / A-d: Delete"
  DELETE_BIND="Alt-d:execute(echo -n 'Delete {+} [y/N]? ' && read -r yn && [[ \$yn =~ ^[Yy]$ ]] && rm $JN_PATH/$workspace/{+})"
  # shellcheck disable=SC2016
  _display_all_files "$workspace" | fzf --ansi --multi --tmux 88% \
    --bind "$DELETE_BIND" \
    --bind 'alt-a:select-all,alt-s:deselect-all,ctrl-p:toggle-preview' \
    --bind='alt-up:preview-up,alt-k:preview-up' \
    --bind='alt-down:preview-down,alt-j:preview-down' \
    --delimiter : \
    --header "$HEADER" \
    --preview "bat --color=always $JN_PATH/$workspace{}" \
    --preview-window up:65% \
    --prompt "$PROMPT" \
    --query "$*"
}

function _fzf_files() {
  local files
  local open_files=()
  local jn_files=()

  if [ -n "$1" ]; then
    workspace="$1"
  fi

  if [ ! -d "$JN_PATH/$workspace" ]; then
    _error "Workspace $1 does not exist"
    exit 1
  fi

  PROMPT="Choose a file to read: "
  if [[ "$FZF_MODE" -eq 1 ]]; then
    # shellcheck disable=SC2119
    mapfile -t jn_files < <(_fzf)
  else
    # shellcheck disable=SC2119
    mapfile -t jn_files < <(_rg | awk -F ':' '{print $1}')
  fi

  if [ -z "${jn_files[*]}" ]; then
    exit 1 # Silent quit
  fi

  for file in "${jn_files[@]}"; do
    open_files+=("$HOME/.jn/$file")
  done
  if [[ "$NO_EDIT" -eq 1 ]]; then
    for files in "${open_files[@]}"; do
      echo "$files"
    done
  else
    $EDITOR "${open_files[@]}"
  fi
  exit 0
}

function _add_note() {
  local file=$1
  local jn_workspace=$2

  [[ -z "$file" ]] && {
    _error "No file specified!"
    exit 1
  }
  [[ -z "$jn_workspace" ]] && jn_workspace=$(_display_workspaces | fzf --preview "eza -la $JN_PATH/{}")
  touch "$jn_workspace/$file.md" && $EDITOR "$file.md"
  exit 0
}

function _apply_template() {
  local template="$JN_TEMPLATE/$1"
  local destination=$2

  if [ ! -f "$destination" ]; then
    if [ ! -f "$template" ]; then
      touch "$destination"
    else
      cat "$template" >>"$destination"
    fi
  else
    return 0
  fi
}

function _journal_parser() {
  local date=$1
  local destination=$2
  local replacements sed_script

  declare -A replacements=(
    ["{{title}}"]="$filename"
    ["{{day}}"]="$day"
    ["{{week}}"]="$week"
    ["{{month}}"]="$month"
    ["{{year}}"]="$year"
    ["{{workspace}}"]="$workspace"
  )

  sed_script=""
  for pattern in "${!replacements[@]}"; do
    replacement="${replacements[$pattern]}"
    sed_script+="s|$pattern|$replacement|g;"
  done

  sed_script=${sed_script%%;}

  sed -i "$sed_script" "$destination"
}

function _get_dates() {
  day=$(date +%F)
  month="$(date +%Y-%m)"
  week="$(date +%Y)-W$(echo "$(date +%V) + 1" | bc)"
  year=$(date +%Y)
}

function _add_journal_entry() {
  local date
  local is_journal=1
  local requested_date=$1
  local val

  if [ -n "$2" ]; then
    workspace="$JN_PATH/$2"
    mkdir -p "$workspace"
  fi

  _get_dates

  if [[ "$requested_date" == "day" ]]; then
    date="$day"
  elif [[ "$requested_date" == "month" ]]; then
    date="$month"
  elif [[ "$requested_date" == "week" ]]; then
    date="$week"
  elif [[ "$requested_date" == "year" ]]; then
    date="$year"
  else
    _error "No date specified!"
    echo "Usage: jn journal day/week/month/year workspace"
    exit 1
  fi

  [[ -z "$workspace" ]] && workspace=$(_display_workspaces | fzf --preview "eza -la $JN_PATH/{}")

  filename="$date"
  _apply_template "$requested_date.md" "$workspace/$filename.md" "$is_journal"
  val=$?
  _journal_parser "$date" "$workspace/$filename.md"
  [[ "$val" -eq 0 ]] || {
    _error "An unknown error occurred!"
    exit 1
  }
  if [[ "$NO_EDIT" -ne 1 ]]; then
    $EDITOR "$workspace/$filename.md"
  else
    _text "$GREEN" "Created journal entry: $date"
  fi
  exit 0
}

while getopts ":hw-n" opt; do
  case "$opt" in
  h)
    help
    exit 0
    ;;
  -)
    break
    ;;
  n)
    NO_EDIT=1
    ;;
  w)
    DIR=1
    ;;
  ?)
    _text "$RED" "Error: Invalid option '-$OPTARG'" >&2
    exit 1
    ;;
  esac
done

shift $((OPTIND - 1))

while [[ $# -gt 0 ]]; do
  case "$1" in
  --help)
    help
    exit 0
    ;;
  rg)
    shift
    FZF_MODE=0
    _fzf_files "$@" # workspace
    ;;
  fzf)
    shift
    FZF_MODE=1
    _fzf_files "$@" # workspace
    ;;
  add)
    shift
    _add_note "$@" # filename, workspace
    ;;
  journal)
    shift
    _add_journal_entry "$@" # date, workspace
    ;;
  list)
    shift
    _list "$@" # workspace
    ;;
  esac
done

if [ -z "$1" ]; then
  _list
fi
